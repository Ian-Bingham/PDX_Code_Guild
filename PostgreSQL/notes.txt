PostgreSQL Notes


Creating A Table:
CREATE TABLE groceries (
    id INT PRIMARY KEY,
    name TEXT,
    price REAL,
    etc.
)

Inserting Into Table:
INSERT INTO groceries (id, name, price) VALUES (1, 'apple', 0.68, etc.)
INSERT INTO groceries (id, name, price) VALUES (2, 'banana', 0.49, etc.)
INSERT INTO groceries (id, name, price) VALUES (3, 'chicken', 0.98, etc.)

Selecting From Table:
1) Get all values: SELECT * FROM groceries
2) Order by specific value: SELECT * FROM groceries ORDER BY price
3) Get specific attribute:
        a) SELECT name FROM groceries
        b) SELECT name FROM groceries WHERE name = 'banana'
        c) SELECT price FROM groceries WHERE price <= 0.68

Update Table:
UPDATE groceries SET price = 5000 WHERE id = 1

Delete Table:
DELETE FROM groceries WHERE id = 5
Note: First use SELECT on the thing you want to delete to make sure you are grabbing
the correct values, then perform the DELETE query

-------------------------------------------------------------------------------

PSYCOPG2 Notes


connection = psycopg2.connect(user = 'ian',
                              password = '',
                              host = 'localhost',
                              port = '5432',
                              database = 'test_db')
                              - creates a connection object; connects to a database

connection.autocommit = False - must explicitly call connection.commit() to save
                                changes to the database

cursor = connection.cursor()  - creates a cursor object
                              - allows us to execute PostgreSQL commands from Python

cursor.execute(query) - query: SQL query string
                      - executes a PostgreSQL statement (CREATE, INSERT, SELECT, etc)

cursor.executemany(query, records)  - query: SQL query string
                                    - records: list of tuples
                                    - executes several PostgreSQL statements at once
                                    - use placeholders (%s) in query string

connection.commit() - commits all transactions to the database

cursor.fetchall() - gets all (remaining) rows of a query result and returns a list

cursor.fetchmany(size)  - size: the number of rows you want
                        - gets the next set of rows of a query result and returns a list

cursor.fetchone() - fetches the next row of a query result and returns it
